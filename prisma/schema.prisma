// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_in Int? // Required for Github provider
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  savedBooks    SavedBook[]
  reviews       Review[]
  updates       Update[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id         String      @id
  name       String?
  authors    String?
  createdAt  DateTime    @default(now())
  savedBooks SavedBook[]
  reviews    Review[]
  updates    Update[]
}

model SavedBook {
  id         String    @id @default(cuid())
  shelf      String
  bookId     String
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
}

model Review {
  id        String   @id @default(cuid())
  content   String
  score     Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([bookId, userId])
}

model Update {
  id        String   @id @default(cuid())
  content   String
  progress  Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
